generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChefPartnerOrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERED
  CANCELLED
}

enum PaymentType {
  DIGITAL
  CARD
  CASH
  VOUCHER
  OTHER
}

model User {
  id          String             @id @default(uuid())
  email       String             @unique
  password    String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  memberships UserCompanySuite[]
}

model Company {
  id              String    @id @default(uuid())
  corporateName   String
  tradingName     String
  federalDocument String?   @unique @db.VarChar(14)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  chefPartnerProducts  ChefPartnerProduct[]
  chefPartnerOrders    ChefPartnerOrder[]
  chefPartnerCustomers ChefPartnerCustomer[]
  userCompanySuites    UserCompanySuite[]

  @@index([corporateName])
  @@index([tradingName])
}

model Suite {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  UserCompanySuite UserCompanySuite[]
}

model UserCompanySuite {
  id        String    @id @default(uuid())
  userId    String
  companyId String?
  suiteId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user    User     @relation(fields: [userId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])
  suite   Suite    @relation(fields: [suiteId], references: [id])
}

model ChefPartnerProduct {
  id          String    @id @default(uuid())
  companyId   String
  name        String
  description String?
  salePrice   Decimal   @db.Decimal(10, 2)
  costPrice   Decimal?  @db.Decimal(10, 2)
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  company               Company                @relation(fields: [companyId], references: [id])
  chefPartnerOrderItems ChefPartnerOrderItem[]

  @@index([companyId])
  @@index([name])
  @@map("ChefPartner_Products")
}

model ChefPartnerCustomer {
  id              String    @id @default(uuid())
  fullName        String
  email           String?
  phone           String?
  federalDocument String?   @db.VarChar(14)
  companyId       String
  note            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  addresses ChefPartnerCustomerAddress[]
  orders    ChefPartnerOrder[]

  company Company @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([fullName])
  @@map("ChefPartner_Customers")
}

model ChefPartnerCustomerAddress {
  id           String    @id @default(uuid())
  customerId   String
  street       String
  number       String    @default("S/N")
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  customer ChefPartnerCustomer @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([zipCode])
  @@map("ChefPartner_CustomerAddresses")
}

model ChefPartnerOrder {
  id              String                 @id @default(uuid())
  customerId      String
  companyId       String
  scheduledAt     DateTime
  status          ChefPartnerOrderStatus
  originalAmount  Decimal                @db.Decimal(10, 2)
  discountAmount  Decimal?               @db.Decimal(10, 2)
  discountPercent Decimal?               @db.Decimal(5, 2)
  shippingAmount  Decimal?               @db.Decimal(10, 2)
  finalAmount     Decimal                @db.Decimal(10, 2)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  deletedAt       DateTime?

  deliveryStreet       String
  deliveryNumber       String  @default("S/N")
  deliveryComplement   String?
  deliveryNeighborhood String
  deliveryCity         String
  deliveryState        String
  deliveryZipCode      String?

  customer ChefPartnerCustomer    @relation(fields: [customerId], references: [id])
  company  Company                @relation(fields: [companyId], references: [id])
  items    ChefPartnerOrderItem[]

  @@index([customerId])
  @@index([companyId])
  @@index([scheduledAt])
  @@map("ChefPartner_Orders")
}

model ChefPartnerOrderItem {
  id              String   @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  discountAmount  Decimal? @db.Decimal(10, 2)
  discountPercent Decimal? @db.Decimal(5, 2)
  finalPrice      Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  order   ChefPartnerOrder   @relation(fields: [orderId], references: [id])
  product ChefPartnerProduct @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("ChefPartner_OrderItems")
}

model FinancialPaymentMethod {
  id        String      @id @default(cuid())
  name      String      @unique
  type      PaymentType
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  @@map("Financial_PaymentMethod")
}

model FinancialVendor {
  id              String    @id @default(uuid())
  corporateName   String?
  tradingName     String
  federalDocument String?   @db.VarChar(14)
  email           String?
  phone           String?
  note            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  @@index([tradingName])
  @@index([federalDocument])
  @@map("Financial_Vendors")
}
